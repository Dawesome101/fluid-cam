//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input System/HoverInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HoverInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HoverInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HoverInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerHoverSmall"",
            ""id"": ""f73b4955-0a20-466c-a696-8d3b41850392"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4f33ff05-c49c-4206-a2d1-0ce1bd3e95db"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Value"",
                    ""id"": ""a1db0b1a-3d2e-4422-8e83-1a709121936f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HCamera"",
                    ""type"": ""Value"",
                    ""id"": ""b02cfbbc-8bf0-40de-93ff-c8ba495194c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""738517a6-3ba1-42ba-85aa-5b8457cdee7f"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""4cc8891c-461a-474c-ab69-c70c643b9a21"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""c583f10f-de56-49ac-bcde-498615c16f87"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""c4eabbd6-0993-40a1-85cf-675c026926f8"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""44cfcf88-9098-4f06-9be9-fc38653c79a7"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""75b15e5e-3f53-4438-a678-896ce8e78787"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""RightStick"",
                    ""id"": ""264f2a3b-32d4-44b9-bada-5df89c82e08a"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8b9a4ffb-4518-48ee-87eb-301f34653b0d"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dec33930-a526-4daf-9c22-c43fb8cc5137"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a7dc2e9c-867f-47ba-8b9f-6a5fb5df3f8c"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5e79ee6a-0f6f-4288-8729-03b5d9aec189"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Hover"",
            ""bindingGroup"": ""Hover"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerHoverSmall
        m_PlayerHoverSmall = asset.FindActionMap("PlayerHoverSmall", throwIfNotFound: true);
        m_PlayerHoverSmall_Movement = m_PlayerHoverSmall.FindAction("Movement", throwIfNotFound: true);
        m_PlayerHoverSmall_Boost = m_PlayerHoverSmall.FindAction("Boost", throwIfNotFound: true);
        m_PlayerHoverSmall_HCamera = m_PlayerHoverSmall.FindAction("HCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerHoverSmall
    private readonly InputActionMap m_PlayerHoverSmall;
    private IPlayerHoverSmallActions m_PlayerHoverSmallActionsCallbackInterface;
    private readonly InputAction m_PlayerHoverSmall_Movement;
    private readonly InputAction m_PlayerHoverSmall_Boost;
    private readonly InputAction m_PlayerHoverSmall_HCamera;
    public struct PlayerHoverSmallActions
    {
        private @HoverInputActions m_Wrapper;
        public PlayerHoverSmallActions(@HoverInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerHoverSmall_Movement;
        public InputAction @Boost => m_Wrapper.m_PlayerHoverSmall_Boost;
        public InputAction @HCamera => m_Wrapper.m_PlayerHoverSmall_HCamera;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHoverSmall; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHoverSmallActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerHoverSmallActions instance)
        {
            if (m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnMovement;
                @Boost.started -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnBoost;
                @HCamera.started -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnHCamera;
                @HCamera.performed -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnHCamera;
                @HCamera.canceled -= m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface.OnHCamera;
            }
            m_Wrapper.m_PlayerHoverSmallActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @HCamera.started += instance.OnHCamera;
                @HCamera.performed += instance.OnHCamera;
                @HCamera.canceled += instance.OnHCamera;
            }
        }
    }
    public PlayerHoverSmallActions @PlayerHoverSmall => new PlayerHoverSmallActions(this);
    private int m_HoverSchemeIndex = -1;
    public InputControlScheme HoverScheme
    {
        get
        {
            if (m_HoverSchemeIndex == -1) m_HoverSchemeIndex = asset.FindControlSchemeIndex("Hover");
            return asset.controlSchemes[m_HoverSchemeIndex];
        }
    }
    public interface IPlayerHoverSmallActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnHCamera(InputAction.CallbackContext context);
    }
}
